{"version":3,"sources":["components/Shapes/Shapes.js","components/Input/Input.js","components/TodoItem/TodoItem.js","components/TodoList/TodoList.js","components/TodosFilter/TodosFilter.js","components/TodoApp/TodoApp.js","App.js","index.js"],"names":["TaskTypes","PropTypes","func","isRequired","shape","title","string","id","completed","bool","arrayOf","Input","state","isValid","handleValue","event","titleValue","target","value","replace","setState","prevState","onSubmit","onAddTask","props","addTask","key","this","className","name","placeholder","required","onKeyPress","onChange","React","Component","TodoItem","isEdited","temporaryTitle","editTask","taskId","editedTitle","keyCode","onChangeCurrentTask","previousTitle","isCompleted","toggle","onDeleted","editing","type","checked","htmlFor","onDoubleClick","onClick","ref","input","focus","onKeyUp","onBlur","TodoList","tasks","showOnlyActive","showOnlyCompleted","onAllSelected","tasksToShow","filter","task","map","defaultProps","TodosFilter","onToggleTask","onClear","activeTasks","length","selected","href","TodoApp","tasksFromServer","addNewTask","newTask","uuid","changeCurrentTask","toggleCheck","toggleTask","deleteTask","currentID","clearCompletedTasks","selectAllAsCompleted","isChecked","localState","JSON","parse","localStorage","getItem","setItem","stringify","numberOfTask","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6f9a0d70.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\n\nexport const InputTypes = {\n  addTask: PropTypes.func.isRequired,\n};\n\nexport const TaskTypes = PropTypes.shape({\n  title: PropTypes.string.isRequired,\n  id: PropTypes.string.isRequired,\n  completed: PropTypes.bool.isRequired,\n});\n\nexport const TodoAppTypes = {\n  tasks: PropTypes.arrayOf(\n    TaskTypes,\n  ),\n};\n\nexport const TodoListTypes = {\n  tasks: PropTypes.arrayOf(\n    TaskTypes,\n  ),\n  showOnlyActive: PropTypes.bool.isRequired,\n  showOnlyCompleted: PropTypes.bool.isRequired,\n  toggle: PropTypes.func.isRequired,\n  onDeleted: PropTypes.func.isRequired,\n  onAllSelected: PropTypes.func.isRequired,\n  onChangeCurrentTask: PropTypes.func.isRequired,\n};\n\nexport const TodoItemTypes = {\n  id: PropTypes.string.isRequired,\n  isCompleted: PropTypes.bool.isRequired,\n  title: PropTypes.string.isRequired,\n  toggle: PropTypes.func.isRequired,\n  onDeleted: PropTypes.func.isRequired,\n  onChangeCurrentTask: PropTypes.func.isRequired,\n};\n\nexport const TodosFilterTypes = {\n  tasks: PropTypes.arrayOf(\n    TaskTypes,\n  ),\n  onToggleTask: PropTypes.func.isRequired,\n  showOnlyActive: PropTypes.bool.isRequired,\n  showOnlyCompleted: PropTypes.bool.isRequired,\n  onClear: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport className from 'classnames';\nimport { InputTypes } from '../Shapes/Shapes';\n\nexport class Input extends React.Component {\n  state = {\n    title: '',\n    isValid: true,\n  }\n\n  handleValue = (event) => {\n    const titleValue = event.target.value.replace(/\\s/, ' ').replace(/^\\s/, '');\n\n    this.setState(prevState => ({\n      title: titleValue,\n      isValid: true,\n    }));\n  }\n\n  onSubmit = (event) => {\n    const onAddTask = this.props.addTask;\n    const { title } = this.state;\n\n    if (!title) {\n      this.setState({\n        isValid: false,\n      });\n\n      return;\n    }\n\n    if (event.key === 'Enter') {\n      onAddTask(title);\n      this.setState({\n        title: '',\n      });\n    }\n  }\n\n  render() {\n    const { title, isValid } = this.state;\n\n    return (\n      <header className=\"header\">\n        <h1>todos</h1>\n        <input\n          name=\"task\"\n          className={className('new-todo ', { 'new-todo--invalid': !isValid })}\n          placeholder={isValid && ('What needs to be done?')}\n          value={title}\n          required\n          onKeyPress={this.onSubmit}\n          onChange={this.handleValue}\n        />\n        {!isValid && (\n          <span className=\"error-message\">Please, type your task</span>\n        )}\n      </header>\n    );\n  }\n}\n\nInput.propTypes = InputTypes;\n","import React from 'react';\nimport className from 'classnames';\nimport { TodoItemTypes } from '../Shapes/Shapes';\n\nexport class TodoItem extends React.Component {\n  state = {\n    isEdited: false,\n    temporaryTitle: this.props.title,\n  }\n\n  editTask = () => {\n    this.setState(prevState => ({\n      isEdited: !prevState.isEdited,\n    }));\n  }\n\n  handleValue = (event) => {\n    const titleValue = event.target.value.replace(/\\s/, ' ').replace(/^\\s/, '');\n\n    this.setState(prevState => ({\n      temporaryTitle: titleValue,\n    }));\n  }\n\n  onSubmit = (event) => {\n    const taskId = event.target.name;\n    const editedTitle = event.target.value;\n    const { keyCode } = event;\n\n    const onAddTask = this.props.onChangeCurrentTask;\n    const previousTitle = this.state.temporaryTitle;\n\n    if (keyCode === 27 || !keyCode) { // if user press Esc or click outside\n      onAddTask(previousTitle, taskId);\n\n      onAddTask(editedTitle, taskId);\n      this.setState(prevState => ({\n        isEdited: false,\n      }));\n    }\n\n    if (keyCode === 13) {\n      onAddTask(editedTitle, taskId);\n\n      onAddTask(editedTitle, taskId);\n      this.setState(prevState => ({\n        isEdited: false,\n      }));\n    }\n  }\n\n  render() {\n    const {\n      id,\n      isCompleted,\n      title,\n      toggle,\n      onDeleted,\n    } = this.props;\n\n    const { isEdited, temporaryTitle } = this.state;\n\n    return (\n      <li\n        className={className({\n          completed: isCompleted,\n          editing: isEdited,\n        })}\n      >\n        <div className=\"view\">\n          <input\n            id={id}\n            type=\"checkbox\"\n            className=\"toggle\"\n            value={id}\n            onChange={toggle}\n            checked={isCompleted}\n          />\n          <label\n            htmlFor={id}\n            value={id}\n            onDoubleClick={this.editTask}\n          >\n            {title}\n          </label>\n          <button\n            type=\"button\"\n            className=\"destroy\"\n            value={id}\n            onClick={onDeleted}\n          />\n        </div>\n        <input\n          name={id}\n          type=\"text\"\n          className=\"edit\"\n          required\n          ref={input => input && input.focus()}\n          value={temporaryTitle}\n          onChange={this.handleValue}\n          onKeyUp={this.onSubmit}\n          onBlur={this.onSubmit}\n        />\n      </li>\n    );\n  }\n}\n\nTodoItem.propTypes = TodoItemTypes;\n","import React from 'react';\nimport { TodoListTypes } from '../Shapes/Shapes';\nimport { TodoItem } from '../TodoItem/TodoItem';\n\nexport const TodoList = (props) => {\n  const {\n    tasks,\n    showOnlyActive,\n    showOnlyCompleted,\n    toggle,\n    onDeleted,\n    onAllSelected,\n    onChangeCurrentTask,\n  } = props;\n\n  let tasksToShow = tasks;\n\n  if (showOnlyActive) {\n    tasksToShow = tasks.filter(task => task.completed === false);\n  } else if (showOnlyCompleted) {\n    tasksToShow = tasks.filter(task => task.completed === true);\n  }\n\n  return (\n    <section className=\"main\">\n      <input\n        type=\"checkbox\"\n        id=\"toggle-all\"\n        className=\"toggle-all\"\n        onChange={onAllSelected}\n      />\n      <label htmlFor=\"toggle-all\">Mark all as complete</label>\n      <ul className=\"todo-list\">\n        {tasksToShow.map(task => (\n          <TodoItem\n            key={task.id}\n            id={task.id}\n            isCompleted={task.completed}\n            title={task.title}\n            toggle={toggle}\n            onDeleted={onDeleted}\n            onChangeCurrentTask={onChangeCurrentTask}\n          />\n\n        ))}\n      </ul>\n    </section>\n  );\n};\n\nTodoList.propTypes = TodoListTypes;\n\nTodoList.defaultProps = {\n  tasks: [],\n};\n","import React from 'react';\nimport className from 'classnames';\nimport { TodosFilterTypes } from '../Shapes/Shapes';\n\nexport const TodosFilter = (props) => {\n  const {\n    tasks,\n    onToggleTask,\n    onClear,\n    showOnlyActive,\n    showOnlyCompleted,\n  } = props;\n\n  const activeTasks = tasks.filter(task => task.completed === false).length;\n\n  return (\n    <footer className=\"footer\">\n      <span className=\"todo-count\">\n        {`${activeTasks}\n          items left`}\n      </span>\n      <ul className=\"filters\">\n        <li>\n          <a\n            className={className({ selected: !showOnlyActive\n              && !showOnlyCompleted })}\n            name=\"all\"\n            href=\"#/\"\n            onClick={onToggleTask}\n          >\n            All\n          </a>\n        </li>\n\n        <li>\n          <a\n            className={className({ selected: showOnlyActive })}\n            name=\"active\"\n            href=\"#/active\"\n            onClick={onToggleTask}\n          >\n            Active\n          </a>\n        </li>\n\n        <li>\n          <a\n            className={className({ selected: showOnlyCompleted })}\n            name=\"completed\"\n            href=\"#/completed\"\n            onClick={onToggleTask}\n          >\n            Completed\n          </a>\n        </li>\n      </ul>\n      <button\n        type=\"button\"\n        className=\"clear-completed\"\n        onClick={onClear}\n      >\n        Clear completed\n      </button>\n    </footer>\n  );\n};\n\nTodosFilter.propTypes = TodosFilterTypes;\n","import React from 'react';\nimport { uuid } from 'uuidv4';\n\nimport { TodoAppTypes } from '../Shapes/Shapes';\nimport { Input } from '../Input/Input';\nimport { TodoList } from '../TodoList/TodoList';\nimport { TodosFilter } from '../TodosFilter/TodosFilter';\n\nexport class TodoApp extends React.Component {\n  state = {\n    tasks: this.props.tasksFromServer,\n    showOnlyCompleted: false,\n    showOnlyActive: false,\n  }\n\n  componentDidMount() {\n    const localState = JSON.parse(localStorage.getItem('todoApp'));\n\n    if (localState) {\n      this.setState({ ...localState });\n    }\n  }\n\n  componentDidUpdate() {\n    localStorage.setItem('todoApp', JSON.stringify(this.state));\n  }\n\n  addNewTask = (title) => {\n    const newTask = {\n      title,\n      id: uuid(),\n      completed: false,\n    };\n\n    this.setState(prevState => ({\n      tasks: [...prevState.tasks, newTask],\n    }));\n  }\n\n  changeCurrentTask = (title, id) => {\n    if (title === '') {\n      return;\n    }\n\n    this.setState(prevState => ({\n      tasks: prevState.tasks.map((task) => {\n        if (task.id === id) {\n          return {\n            ...task,\n            title,\n          };\n        }\n\n        return task;\n      }),\n    }));\n  }\n\n  toggleCheck = (event) => {\n    const id = event.target.value;\n\n    this.setState(prevState => ({\n      tasks: prevState.tasks.map((task) => {\n        if (task.id === id) {\n          return {\n            ...task,\n            completed: !task.completed,\n          };\n        }\n\n        return task;\n      }),\n    }));\n  }\n\n  toggleTask = (event) => {\n    const onToggleTask = event.target.name;\n\n    switch (onToggleTask) {\n      case 'active':\n        this.setState({\n          showOnlyCompleted: false,\n          showOnlyActive: true,\n        });\n        break;\n      case 'completed':\n        this.setState({\n          showOnlyCompleted: true,\n          showOnlyActive: false,\n        });\n        break;\n      default: this.setState({\n        showOnlyCompleted: false,\n        showOnlyActive: false,\n      });\n    }\n  }\n\n  deleteTask = (event) => {\n    const currentID = event.target.value;\n\n    this.setState(prevState => ({\n      tasks: prevState.tasks.filter(task => task.id !== currentID),\n    }));\n  }\n\n  clearCompletedTasks = () => {\n    this.setState(prevState => ({\n      tasks: prevState.tasks.filter(task => task.completed === false),\n    }));\n  }\n\n  selectAllAsCompleted = (event) => {\n    const isChecked = event.target.checked;\n\n    this.setState(prevState => ({\n      tasks: prevState.tasks.map(task => ({\n        ...task,\n        completed: isChecked,\n      })),\n    }));\n  }\n\n  render() {\n    const { tasks, showOnlyCompleted, showOnlyActive } = this.state;\n\n    const numberOfTask = tasks.length;\n\n    return (\n      <section className=\"todoapp\">\n\n        <Input addTask={this.addNewTask} />\n\n        <TodoList\n          tasks={tasks}\n          showOnlyActive={showOnlyActive}\n          showOnlyCompleted={showOnlyCompleted}\n          toggle={this.toggleCheck}\n          onDeleted={this.deleteTask}\n          onAllSelected={this.selectAllAsCompleted}\n          onChangeCurrentTask={this.changeCurrentTask}\n        />\n\n        {(numberOfTask)\n          ? (\n            <TodosFilter\n              tasks={tasks}\n              onToggleTask={this.toggleTask}\n              showOnlyActive={showOnlyActive}\n              showOnlyCompleted={showOnlyCompleted}\n              onClear={this.clearCompletedTasks}\n            />\n          )\n          : ''}\n\n      </section>\n    );\n  }\n}\n\nTodoApp.propTypes = TodoAppTypes;\n\nTodoApp.defaultProps = {\n  tasks: [],\n};\n","import React from 'react';\n\nimport tasksFromServer from './api/tasks.json';\nimport { TodoApp } from './components/TodoApp/TodoApp';\n\nconst App = () => (\n  <TodoApp tasksFromServer={tasksFromServer} />\n);\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './base.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}