{"version":3,"sources":["components/TodoApp/TodoAppShape.js","components/Input/Input.js","components/Input/InputShape.js","components/TodoList/TodoListShape.js","components/TodoItem/TodoItem.js","components/TodoItem/TodoItemShape.js","components/TodoList/TodoList.js","components/TodosFilter/TodosFilterShape.js","components/TodosFilter/TodosFilter.js","components/TodoApp/TodoApp.js","App.js","index.js"],"names":["TaskTypes","PropTypes","shape","title","string","isRequired","id","completed","bool","arrayOf","Input","func","state","isValid","handleValue","event","titleValue","target","value","replace","setState","prevState","onSubmit","addTask","props","key","uuid","this","inputClassNames","className","name","placeholder","required","onKeyPress","onChange","React","Component","TodoItem","isEdited","temporaryTitle","editTask","taskId","editedTitle","keyCode","onAddTask","onChangeCurrentTask","previousTitle","isCompleted","toggle","onDeleted","editing","type","checked","htmlFor","onDoubleClick","onClick","ref","input","focus","onKeyUp","onBlur","TodoList","tasks","tab","onAllSelected","tasksToShow","isActiveFilter","filter","task","map","defaultProps","TodosFilter","onToggleShowedTask","onClear","NumberOfActiveTasks","length","linkClassNames","selected","href","TodoApp","tasksFromServer","addNewTask","newTask","changeCurrentTask","toggleCheck","toggleShowedTask","deleteTask","clearCompletedTasks","selectAllAsCompleted","localState","JSON","parse","localStorage","getItem","setItem","stringify","isAnyTask","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d5c64b64.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\n\nconst TaskTypes = PropTypes.shape({\n  title: PropTypes.string.isRequired,\n  id: PropTypes.string.isRequired,\n  completed: PropTypes.bool.isRequired,\n});\n\nexport const TodoAppTypes = {\n  tasksFromServer: PropTypes.arrayOf(\n    TaskTypes,\n  ),\n};\n","import React from 'react';\nimport className from 'classnames';\nimport { uuid } from 'uuidv4';\nimport { InputTypes } from './InputShape';\n\nexport class Input extends React.Component {\n  state = {\n    title: '',\n    isValid: true,\n  }\n\n  handleValue = (event) => {\n    const titleValue = event.target.value.replace(/\\s/, ' ').replace(/^\\s/, '');\n\n    this.setState(prevState => ({\n      title: titleValue,\n      isValid: true,\n    }));\n  }\n\n  onSubmit = (event) => {\n    const { addTask } = this.props;\n    const { title } = this.state;\n\n    if (!title) {\n      this.setState({\n        isValid: false,\n      });\n\n      return;\n    }\n\n    if (event.key === 'Enter') {\n      const newTask = {\n        title,\n        id: uuid(),\n        completed: false,\n      };\n\n      addTask(newTask);\n\n      this.setState({\n        title: '',\n      });\n    }\n  }\n\n  render() {\n    const { title, isValid } = this.state;\n\n    const inputClassNames = className(\n      'new-todo ',\n      { 'new-todo--invalid': !isValid },\n    );\n\n    return (\n      <header className=\"header\">\n        <h1>todos</h1>\n        <input\n          name=\"task\"\n          className={inputClassNames}\n          placeholder={isValid && ('What needs to be done?')}\n          value={title}\n          required\n          onKeyPress={this.onSubmit}\n          onChange={this.handleValue}\n        />\n        {!isValid && (\n          <span className=\"error-message\">Please, type your task</span>\n        )}\n      </header>\n    );\n  }\n}\n\nInput.propTypes = InputTypes;\n","import PropTypes from 'prop-types';\n\nexport const InputTypes = {\n  addTask: PropTypes.func.isRequired,\n};\n","import PropTypes from 'prop-types';\n\nconst TaskTypes = PropTypes.shape({\n  title: PropTypes.string.isRequired,\n  id: PropTypes.string.isRequired,\n  completed: PropTypes.bool.isRequired,\n});\n\nexport const TodoListTypes = {\n  tasks: PropTypes.arrayOf(\n    TaskTypes,\n  ),\n  tab: PropTypes.string.isRequired,\n  toggle: PropTypes.func.isRequired,\n  onDeleted: PropTypes.func.isRequired,\n  onAllSelected: PropTypes.func.isRequired,\n  onChangeCurrentTask: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport className from 'classnames';\nimport { TodoItemTypes } from './TodoItemShape';\n\nexport class TodoItem extends React.Component {\n  state = {\n    isEdited: false,\n    temporaryTitle: this.props.title,\n  }\n\n  editTask = () => {\n    this.setState(prevState => ({\n      isEdited: !prevState.isEdited,\n    }));\n  }\n\n  handleValue = (event) => {\n    const { value } = event.target;\n    const title = value.replace(/\\s/, ' ').replace(/^\\s/, '');\n\n    this.setState(prevState => ({\n      temporaryTitle: title,\n    }));\n  }\n\n  onSubmit = (event) => {\n    const taskId = event.target.name;\n    const editedTitle = event.target.value;\n    const { keyCode } = event;\n\n    const onAddTask = this.props.onChangeCurrentTask;\n    const previousTitle = this.state.temporaryTitle;\n\n    if (keyCode === 27 || !keyCode) { // if user press Esc or click outside\n      onAddTask(previousTitle, taskId);\n\n      onAddTask(editedTitle, taskId);\n      this.setState({\n        isEdited: false,\n        temporaryTitle: this.props.title,\n      });\n    }\n\n    if (keyCode === 13) {\n      onAddTask(editedTitle, taskId);\n\n      onAddTask(editedTitle, taskId);\n      this.setState(prevState => ({\n        isEdited: false,\n      }));\n    }\n  }\n\n  render() {\n    const {\n      id,\n      isCompleted,\n      title,\n      toggle,\n      onDeleted,\n    } = this.props;\n\n    const { isEdited, temporaryTitle } = this.state;\n\n    return (\n      <li\n        className={className({\n          completed: isCompleted,\n          editing: isEdited,\n        })}\n      >\n        <div className=\"view\">\n          <input\n            id={id}\n            type=\"checkbox\"\n            className=\"toggle\"\n            value={id}\n            onChange={toggle}\n            checked={isCompleted}\n          />\n          <label\n            htmlFor={id}\n            value={id}\n            onDoubleClick={this.editTask}\n          >\n            {title}\n          </label>\n          <button\n            type=\"button\"\n            className=\"destroy\"\n            value={id}\n            onClick={onDeleted}\n          />\n        </div>\n        <input\n          name={id}\n          type=\"text\"\n          className=\"edit\"\n          required\n          ref={input => input && input.focus()}\n          value={temporaryTitle}\n          onChange={this.handleValue}\n          onKeyUp={this.onSubmit}\n          onBlur={this.onSubmit}\n        />\n      </li>\n    );\n  }\n}\n\nTodoItem.propTypes = TodoItemTypes;\n","import PropTypes from 'prop-types';\n\nexport const TodoItemTypes = {\n  id: PropTypes.string.isRequired,\n  isCompleted: PropTypes.bool.isRequired,\n  title: PropTypes.string.isRequired,\n  toggle: PropTypes.func.isRequired,\n  onDeleted: PropTypes.func.isRequired,\n  onChangeCurrentTask: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport { TodoListTypes } from './TodoListShape';\nimport { TodoItem } from '../TodoItem/TodoItem';\n\nexport const TodoList = (props) => {\n  const {\n    tasks,\n    tab,\n    toggle,\n    onDeleted,\n    onAllSelected,\n    onChangeCurrentTask,\n  } = props;\n\n  let tasksToShow = tasks;\n\n  if (tab !== 'all') {\n    const isActiveFilter = (tab === 'active');\n\n    tasksToShow = tasks.filter(task => task.completed === isActiveFilter);\n  }\n\n  return (\n    <section className=\"main\">\n      <input\n        type=\"checkbox\"\n        id=\"toggle-all\"\n        className=\"toggle-all\"\n        onChange={onAllSelected}\n      />\n      <label htmlFor=\"toggle-all\">Mark all as complete</label>\n      <ul className=\"todo-list\">\n        {tasksToShow.map(task => (\n          <TodoItem\n            key={task.id}\n            id={task.id}\n            isCompleted={task.completed}\n            title={task.title}\n            toggle={toggle}\n            onDeleted={onDeleted}\n            onChangeCurrentTask={onChangeCurrentTask}\n          />\n\n        ))}\n      </ul>\n    </section>\n  );\n};\n\nTodoList.propTypes = TodoListTypes;\n\nTodoList.defaultProps = {\n  tasks: [],\n};\n","import PropTypes from 'prop-types';\n\nconst TaskTypes = PropTypes.shape({\n  title: PropTypes.string.isRequired,\n  id: PropTypes.string.isRequired,\n  completed: PropTypes.bool.isRequired,\n});\n\nexport const TodosFilterTypes = {\n  tasks: PropTypes.arrayOf(\n    TaskTypes,\n  ),\n  onToggleShowedTask: PropTypes.func.isRequired,\n  tab: PropTypes.string.isRequired,\n  onClear: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport className from 'classnames';\nimport { TodosFilterTypes } from './TodosFilterShape';\n\nexport const TodosFilter = (props) => {\n  const {\n    tasks,\n    onToggleShowedTask,\n    onClear,\n    tab,\n  } = props;\n\n  const NumberOfActiveTasks = tasks\n    .filter(task => task.completed === false).length;\n\n  const linkClassNames = className({\n    selected: (tab === 'all'),\n  });\n\n  return (\n    <footer className=\"footer\">\n      <span className=\"todo-count\">\n        {`${NumberOfActiveTasks} items left`}\n      </span>\n      <ul className=\"filters\">\n        <li>\n          <a\n            className={linkClassNames}\n            name=\"all\"\n            href=\"#/\"\n            onClick={onToggleShowedTask}\n          >\n            All\n          </a>\n        </li>\n\n        <li>\n          <a\n            className={className({ selected: (tab === 'active') })}\n            name=\"active\"\n            href=\"#/active\"\n            onClick={onToggleShowedTask}\n          >\n            Active\n          </a>\n        </li>\n\n        <li>\n          <a\n            className={className({ selected: (tab === 'completed') })}\n            name=\"completed\"\n            href=\"#/completed\"\n            onClick={onToggleShowedTask}\n          >\n            Completed\n          </a>\n        </li>\n      </ul>\n      <button\n        type=\"button\"\n        className=\"clear-completed\"\n        onClick={onClear}\n      >\n        Clear completed\n      </button>\n    </footer>\n  );\n};\n\nTodosFilter.propTypes = TodosFilterTypes;\n","import React from 'react';\nimport { TodoAppTypes } from './TodoAppShape';\nimport { Input } from '../Input/Input';\nimport { TodoList } from '../TodoList/TodoList';\nimport { TodosFilter } from '../TodosFilter/TodosFilter';\n\nexport class TodoApp extends React.Component {\n  state = {\n    tasks: this.props.tasksFromServer,\n    tab: 'all',\n  }\n\n  componentDidMount() {\n    const localState = JSON.parse(localStorage.getItem('todoApp'));\n\n    if (localState) {\n      this.setState({ ...localState });\n    }\n  }\n\n  componentDidUpdate() {\n    localStorage.setItem('todoApp', JSON.stringify(this.state));\n  }\n\n  addNewTask = (newTask) => {\n    this.setState(prevState => ({\n      tasks: [...prevState.tasks, newTask],\n    }));\n  }\n\n  changeCurrentTask = (title, id) => {\n    if (title === '') {\n      return;\n    }\n\n    this.setState(prevState => ({\n      tasks: prevState.tasks.map((task) => {\n        if (task.id === id) {\n          return {\n            ...task,\n            title,\n          };\n        }\n\n        return task;\n      }),\n    }));\n  }\n\n  toggleCheck = (event) => {\n    const id = event.target.value;\n\n    this.setState(prevState => ({\n      tasks: prevState.tasks.map((task) => {\n        if (task.id === id) {\n          return {\n            ...task,\n            completed: !task.completed,\n          };\n        }\n\n        return task;\n      }),\n    }));\n  }\n\n  toggleShowedTask = (event) => {\n    const { name } = event.target;\n\n    this.setState({\n      tab: name,\n    });\n  }\n\n  deleteTask = (event) => {\n    const { value } = event.target;\n\n    this.setState(prevState => ({\n      tasks: prevState.tasks.filter(task => task.id !== value),\n    }));\n  }\n\n  clearCompletedTasks = () => {\n    this.setState(prevState => ({\n      tasks: prevState.tasks.filter(task => task.completed === false),\n    }));\n  }\n\n  selectAllAsCompleted = (event) => {\n    const { checked } = event.target;\n\n    this.setState(prevState => ({\n      tasks: prevState.tasks.map(task => ({\n        ...task,\n        completed: checked,\n      })),\n    }));\n  }\n\n  render() {\n    const { tasks, tab } = this.state;\n    const isAnyTask = tasks.length !== 0;\n\n    return (\n      <section className=\"todoapp\">\n\n        <Input addTask={this.addNewTask} />\n\n        <TodoList\n          tasks={tasks}\n          tab={tab}\n          toggle={this.toggleCheck}\n          onDeleted={this.deleteTask}\n          onAllSelected={this.selectAllAsCompleted}\n          onChangeCurrentTask={this.changeCurrentTask}\n        />\n\n        {isAnyTask\n          && (\n            <TodosFilter\n              tasks={tasks}\n              onToggleShowedTask={this.toggleShowedTask}\n              tab={tab}\n              onClear={this.clearCompletedTasks}\n            />\n          )}\n\n      </section>\n    );\n  }\n}\n\nTodoApp.propTypes = TodoAppTypes;\n\nTodoApp.defaultProps = {\n  tasksFromServer: [],\n};\n","import React from 'react';\n\nimport tasksFromServer from './api/tasks.json';\nimport { TodoApp } from './components/TodoApp/TodoApp';\n\nconst App = () => (\n  <TodoApp tasksFromServer={tasksFromServer} />\n);\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './base.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}