{"version":3,"sources":["components/Shapes/Shapes.js","components/Input/Input.js","components/TodoItem/TodoItem.js","components/TodoList/TodoList.js","components/TodosFilter/TodosFilter.js","components/TodoApp/TodoApp.js","App.js","index.js"],"names":["TaskTypes","PropTypes","func","isRequired","shape","title","string","id","completed","bool","isEdited","arrayOf","Input","state","isValid","handleValue","event","titleValue","target","value","replace","setState","prevState","onSubmit","onAddTask","props","addTask","key","this","className","name","placeholder","required","onKeyPress","onChange","React","Component","TodoItem","editedTitle","onChangeCurrentTask","taskId","keyCode","isCompleted","toggle","onDeleted","onEdit","type","checked","htmlFor","onDoubleClick","onClick","ref","input","focus","onKeyDown","onBlur","TodoList","tasks","showOnlyActive","showOnlyCompleted","onAllSelected","tasksToShow","filter","task","map","editing","defaultProps","TodosFilter","onToggleTask","onClear","activeTasks","length","selected","href","TodoApp","numberOfTask","App","tasksFromServer","addNewTask","newTask","uuid","changeCurrentTask","toggleCheck","editTask","currentId","currentTarget","getAttribute","toggleTask","deleteTask","currentID","clearCompletedTasks","selectAllAsCompleted","isChecked","ReactDOM","render","document","getElementById"],"mappings":"2jBAMaA,GAHFC,IAAUC,KAAKC,WAGDF,IAAUG,MAAM,CACvCC,MAAOJ,IAAUK,OAAOH,WACxBI,GAAIN,IAAUK,OAAOH,WACrBK,UAAWP,IAAUQ,KAAKN,WAC1BO,SAAUT,IAAUQ,KAAKN,c,GAIlBF,IAAUU,QACfX,GAEcC,IAAUQ,KAAKN,WACZF,IAAUQ,KAAKN,WACzBF,IAAUC,KAAKC,WAChBF,IAAUC,KAAKC,WACTF,IAAUC,KAAKC,WAClBF,IAAUC,KAAKC,WACjBF,IAAUC,KAAKC,WACTF,IAAUC,KAAKC,WACtBF,IAAUC,KAAKC,WACFF,IAAUC,KAAKC,WAI7BF,IAAUU,QACfX,GAEcC,IAAUQ,KAAKN,WACZF,IAAUQ,KAAKN,WAC1BF,IAAUC,KAAKC,WACZF,IAAUC,KAAKC,WACXF,IAAUC,KAAKC,WACtBF,IAAUC,KAAKC,WACFF,IAAUC,KAAKC,WAIhCF,IAAUK,OAAOH,WACRF,IAAUQ,KAAKN,WACrBF,IAAUK,OAAOH,WAChBF,IAAUC,KAAKC,WACZF,IAAUC,KAAKC,WACLF,IAAUC,KAAKC,WAI7BF,IAAUU,QACfX,GAEYC,IAAUC,KAAKC,WACbF,IAAUQ,KAAKN,WACZF,IAAUQ,KAAKN,WACzBF,IAAUC,KAAKC,W,eCtDbS,EAAb,4MACEC,MAAQ,CACNR,MAAO,GACPS,SAAS,GAHb,EAMEC,YAAc,SAACC,GACb,IAAMC,EAAaD,EAAME,OAAOC,MAAMC,QAAQ,KAAM,KAAKA,QAAQ,MAAO,IAExE,EAAKC,UAAS,SAAAC,GAAS,MAAK,CAC1BjB,MAAOY,EACPH,SAAS,OAXf,EAeES,SAAW,SAACP,GACV,IAAMQ,EAAY,EAAKC,MAAMC,QACrBrB,EAAU,EAAKQ,MAAfR,MAEHA,EAQa,UAAdW,EAAMW,MACRH,EAAUnB,GACV,EAAKgB,SAAS,CACZhB,MAAO,MAVT,EAAKgB,SAAS,CACZP,SAAS,KArBjB,uDAmCY,IAAD,EACoBc,KAAKf,MAAxBR,EADD,EACCA,MAAOS,EADR,EACQA,QAEf,OACE,4BAAQe,UAAU,UAChB,qCACA,2BACEC,KAAK,OACLD,UAAWA,IAAU,YAAa,CAAE,qBAAsBf,IAC1DiB,YAAajB,GAAY,yBACzBK,MAAOd,EACP2B,UAAQ,EACRC,WAAYL,KAAKL,SACjBW,SAAUN,KAAKb,eAEfD,GACA,0BAAMe,UAAU,iBAAhB,+BAnDV,GAA2BM,IAAMC,WCDpBC,EAAb,4MACExB,MAAQ,CACNyB,YAAa,EAAKb,MAAMpB,OAF5B,EAKEU,YAAc,SAACC,GACb,IAAMC,EAAaD,EAAME,OAAOC,MAAMC,QAAQ,KAAM,KAAKA,QAAQ,MAAO,IAExE,EAAKC,UAAS,SAAAC,GAAS,MAAK,CAC1BgB,YAAarB,OATnB,EAaEM,SAAW,SAACP,GACV,IAAMQ,EAAY,EAAKC,MAAMc,oBACvBC,EAASxB,EAAME,OAAOY,KAI5BN,EAHwB,EAAKX,MAArByB,YAGeE,EAFAxB,EAAMyB,UAjBjC,uDAsBY,IAAD,EAQHb,KAAKH,MANPlB,EAFK,EAELA,GACAmC,EAHK,EAGLA,YACArC,EAJK,EAILA,MACAsC,EALK,EAKLA,OACAC,EANK,EAMLA,UACAC,EAPK,EAOLA,OAGMP,EAAgBV,KAAKf,MAArByB,YAER,OACE,oCACE,yBAAKT,UAAU,QACb,2BACEtB,GAAIA,EACJuC,KAAK,WACLjB,UAAU,SACVV,MAAOZ,EACP2B,SAAUS,EACVI,QAASL,IAEX,2BACEM,QAASzC,EACTY,MAAOZ,EACP0C,cAAeJ,GAEdxC,GAEH,4BACEyC,KAAK,SACLjB,UAAU,UACVV,MAAOZ,EACP2C,QAASN,KAGb,2BACEd,KAAMvB,EACNuC,KAAK,OACLjB,UAAU,OACVG,UAAQ,EACRmB,IAAK,SAAAC,GAAK,OAAIA,GAASA,EAAMC,SAC7BlC,MAAOmB,EACPJ,SAAUN,KAAKb,YACfuC,UAAW1B,KAAKL,SAChBgC,OAAQ3B,KAAKL,gBApEvB,GAA8BY,IAAMC,WCEvBoB,EAAW,SAAC/B,GAAW,IAEhCgC,EAQEhC,EARFgC,MACAC,EAOEjC,EAPFiC,eACAC,EAMElC,EANFkC,kBACAhB,EAKElB,EALFkB,OACAC,EAIEnB,EAJFmB,UACAgB,EAGEnC,EAHFmC,cACAf,EAEEpB,EAFFoB,OACAN,EACEd,EADFc,oBAGEsB,EAAcJ,EAQlB,OANIC,EACFG,EAAcJ,EAAMK,QAAO,SAAAC,GAAI,OAAuB,IAAnBA,EAAKvD,aAC/BmD,IACTE,EAAcJ,EAAMK,QAAO,SAAAC,GAAI,OAAuB,IAAnBA,EAAKvD,cAIxC,6BAASqB,UAAU,QACjB,2BACEiB,KAAK,WACLvC,GAAG,aACHsB,UAAU,aACVK,SAAU0B,IAEZ,2BAAOZ,QAAQ,cAAf,wBACA,wBAAInB,UAAU,aACXgC,EAAYG,KAAI,SAAAD,GAAI,OACnB,wBACEpC,IAAKoC,EAAKxD,GACVsB,UAAWA,IAAU,CACnBrB,UAAWuD,EAAKvD,UAChByD,QAASF,EAAKrD,YAGhB,kBAAC,EAAD,CACEH,GAAIwD,EAAKxD,GACTmC,YAAaqB,EAAKvD,UAClBH,MAAO0D,EAAK1D,MACZsC,OAAQA,EACRC,UAAWA,EACXC,OAAQA,EACRN,oBAAqBA,WAWnCiB,EAASU,aAAe,CACtBT,MAAO,IC1DF,IAAMU,EAAc,SAAC1C,GAAW,IAEnCgC,EAKEhC,EALFgC,MACAW,EAIE3C,EAJF2C,aACAC,EAGE5C,EAHF4C,QACAX,EAEEjC,EAFFiC,eACAC,EACElC,EADFkC,kBAGIW,EAAcb,EAAMK,QAAO,SAAAC,GAAI,OAAuB,IAAnBA,EAAKvD,aAAqB+D,OAEnE,OACE,4BAAQ1C,UAAU,UAChB,0BAAMA,UAAU,cAAhB,UACMyC,EADN,2BAIA,wBAAIzC,UAAU,WACZ,4BACE,uBACEA,UAAWA,IAAU,CAAE2C,UAAWd,IAC5BC,IACN7B,KAAK,MACL2C,KAAK,KACLvB,QAASkB,GALX,QAWF,4BACE,uBACEvC,UAAWA,IAAU,CAAE2C,SAAUd,IACjC5B,KAAK,SACL2C,KAAK,WACLvB,QAASkB,GAJX,WAUF,4BACE,uBACEvC,UAAWA,IAAU,CAAE2C,SAAUb,IACjC7B,KAAK,YACL2C,KAAK,cACLvB,QAASkB,GAJX,eAUJ,4BACEtB,KAAK,SACLjB,UAAU,kBACVqB,QAASmB,GAHX,qBCjDOK,EAAU,SAACjD,GAAW,IAE/BgC,EAWEhC,EAXFgC,MACAC,EAUEjC,EAVFiC,eACAC,EASElC,EATFkC,kBACAjC,EAQED,EARFC,QACAiB,EAOElB,EAPFkB,OACAyB,EAME3C,EANF2C,aACAxB,EAKEnB,EALFmB,UACAyB,EAIE5C,EAJF4C,QACAT,EAGEnC,EAHFmC,cACAf,EAEEpB,EAFFoB,OACAN,EACEd,EADFc,oBAGIoC,EAAelB,EAAMc,OAE3B,OACE,6BAAS1C,UAAU,WAEjB,kBAAC,EAAD,CAAOH,QAASA,IAEhB,kBAAC,EAAD,CACE+B,MAAOA,EACPC,eAAgBA,EAChBC,kBAAmBA,EACnBhB,OAAQA,EACRC,UAAWA,EACXgB,cAAeA,EACff,OAAQA,EACRN,oBAAqBA,IAGrBoC,EAEE,kBAAC,EAAD,CACElB,MAAOA,EACPW,aAAcA,EACdV,eAAgBA,EAChBC,kBAAmBA,EACnBU,QAASA,IAGX,KAQVK,EAAQR,aAAe,CACrBT,MAAO,ICtDF,IA4JQmB,EA5Jf,4MACE/D,MAAM,CACJ4C,MAAOoB,EACPlB,mBAAmB,EACnBD,gBAAgB,GAJpB,EAOEoB,WAAa,SAACzE,GACZ,IAAM0E,EAAU,CACd1E,QACAE,GAAIyE,iBACJxE,WAAW,EACXE,UAAU,GAGZ,EAAKW,UAAS,SAAAC,GAAS,MAAK,CAC1BmC,MAAM,GAAD,mBAAMnC,EAAUmC,OAAhB,CAAuBsB,SAhBlC,EAoBEE,kBAAoB,SAAC5E,EAAOE,EAAIkC,GACd,KAAZA,GACF,EAAKpB,UAAS,SAAAC,GAAS,MAAK,CAC1BmC,MAAOnC,EAAUmC,MAAMO,KAAI,SAACD,GAC1B,OAAIA,EAAKxD,KAAOA,EACP,2BACFwD,GADL,IAEE1D,QACAK,UAAU,IAIPqD,SAKG,KAAZtB,GAAmBA,GACrB,EAAKpB,UAAS,SAAAC,GAAS,MAAK,CAC1BmC,MAAOnC,EAAUmC,MAAMO,KAAI,SAACD,GAC1B,OAAIA,EAAKxD,KAAOA,EACP,2BACFwD,GADL,IAEErD,UAAU,IAIPqD,UA/CjB,EAqDEmB,YAAc,SAAClE,GACb,IAAMT,EAAKS,EAAME,OAAOC,MAExB,EAAKE,UAAS,SAAAC,GAAS,MAAK,CAC1BmC,MAAOnC,EAAUmC,MAAMO,KAAI,SAACD,GAC1B,OAAIA,EAAKxD,KAAOA,EACP,2BACFwD,GADL,IAEEvD,WAAYuD,EAAKvD,YAIduD,UAjEf,EAsEEoB,SAAW,SAACnE,GACV,IAAMoE,EAAYpE,EAAMqE,cAAcC,aAAa,SAEnD,EAAKjE,UAAS,SAAAC,GAAS,MAAK,CAC1BmC,MAAOnC,EAAUmC,MAAMO,KAAI,SAACD,GAC1B,OAAIA,EAAKxD,KAAO6E,EACP,2BACFrB,GADL,IAEErD,UAAWqD,EAAKrD,WAIbqD,UAlFf,EAuFEwB,WAAa,SAACvE,GAGZ,OAFqBA,EAAME,OAAOY,MAGhC,IAAK,SACH,EAAKT,SAAS,CACZsC,mBAAmB,EACnBD,gBAAgB,IAElB,MACF,IAAK,YACH,EAAKrC,SAAS,CACZsC,mBAAmB,EACnBD,gBAAgB,IAElB,MACF,QAAS,EAAKrC,SAAS,CACrBsC,mBAAmB,EACnBD,gBAAgB,MAzGxB,EA8GE8B,WAAa,SAACxE,GACZ,IAAMyE,EAAYzE,EAAME,OAAOC,MAE/B,EAAKE,UAAS,SAAAC,GAAS,MAAK,CAC1BmC,MAAOnC,EAAUmC,MAAMK,QAAO,SAAAC,GAAI,OAAIA,EAAKxD,KAAOkF,UAlHxD,EAsHEC,oBAAsB,WACpB,EAAKrE,UAAS,SAAAC,GAAS,MAAK,CAC1BmC,MAAOnC,EAAUmC,MAAMK,QAAO,SAAAC,GAAI,OAAuB,IAAnBA,EAAKvD,kBAxHjD,EA4HEmF,qBAAuB,SAAC3E,GACtB,IAAM4E,EAAY5E,EAAME,OAAO6B,QAE/B,EAAK1B,UAAS,SAAAC,GAAS,MAAK,CAC1BmC,MAAOnC,EAAUmC,MAAMO,KAAI,SAAAD,GAAI,kCAC1BA,GAD0B,IAE7BvD,UAAWoF,YAlInB,uDAuIY,IAAD,EAC8ChE,KAAKf,MAAlD4C,EADD,EACCA,MAAOC,EADR,EACQA,eAAgBC,EADxB,EACwBA,kBAE/B,OACE,kBAAC,EAAD,CACEF,MAAOA,EACPC,eAAgBA,EAChBC,kBAAmBA,EACnBjC,QAASE,KAAKkD,WACdnC,OAAQf,KAAKsD,YACbd,aAAcxC,KAAK2D,WACnB3C,UAAWhB,KAAK4D,WAChBnB,QAASzC,KAAK8D,oBACd9B,cAAehC,KAAK+D,qBACpB9C,OAAQjB,KAAKuD,SACb5C,oBAAqBX,KAAKqD,wBAtJlC,GAAyB9C,IAAMC,WCC/ByD,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,W","file":"static/js/main.b7a6bf89.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\n\nexport const InputTypes = {\n  addTask: PropTypes.func.isRequired,\n};\n\nexport const TaskTypes = PropTypes.shape({\n  title: PropTypes.string.isRequired,\n  id: PropTypes.string.isRequired,\n  completed: PropTypes.bool.isRequired,\n  isEdited: PropTypes.bool.isRequired,\n});\n\nexport const TodoAppTypes = {\n  tasks: PropTypes.arrayOf(\n    TaskTypes,\n  ),\n  showOnlyActive: PropTypes.bool.isRequired,\n  showOnlyCompleted: PropTypes.bool.isRequired,\n  addTask: PropTypes.func.isRequired,\n  toggle: PropTypes.func.isRequired,\n  onToggleTask: PropTypes.func.isRequired,\n  onDeleted: PropTypes.func.isRequired,\n  onClear: PropTypes.func.isRequired,\n  onAllSelected: PropTypes.func.isRequired,\n  onEdit: PropTypes.func.isRequired,\n  onChangeCurrentTask: PropTypes.func.isRequired,\n};\n\nexport const TodoListTypes = {\n  tasks: PropTypes.arrayOf(\n    TaskTypes,\n  ),\n  showOnlyActive: PropTypes.bool.isRequired,\n  showOnlyCompleted: PropTypes.bool.isRequired,\n  toggle: PropTypes.func.isRequired,\n  onDeleted: PropTypes.func.isRequired,\n  onAllSelected: PropTypes.func.isRequired,\n  onEdit: PropTypes.func.isRequired,\n  onChangeCurrentTask: PropTypes.func.isRequired,\n};\n\nexport const TodoItemTypes = {\n  id: PropTypes.string.isRequired,\n  isCompleted: PropTypes.bool.isRequired,\n  title: PropTypes.string.isRequired,\n  toggle: PropTypes.func.isRequired,\n  onDeleted: PropTypes.func.isRequired,\n  onChangeCurrentTask: PropTypes.func.isRequired,\n};\n\nexport const TodosFilterTypes = {\n  tasks: PropTypes.arrayOf(\n    TaskTypes,\n  ),\n  onToggleTask: PropTypes.func.isRequired,\n  showOnlyActive: PropTypes.bool.isRequired,\n  showOnlyCompleted: PropTypes.bool.isRequired,\n  onClear: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport className from 'classnames';\nimport { InputTypes } from '../Shapes/Shapes';\n\nexport class Input extends React.Component {\n  state = {\n    title: '',\n    isValid: true,\n  }\n\n  handleValue = (event) => {\n    const titleValue = event.target.value.replace(/\\s/, ' ').replace(/^\\s/, '');\n\n    this.setState(prevState => ({\n      title: titleValue,\n      isValid: true,\n    }));\n  }\n\n  onSubmit = (event) => {\n    const onAddTask = this.props.addTask;\n    const { title } = this.state;\n\n    if (!title) {\n      this.setState({\n        isValid: false,\n      });\n\n      return;\n    }\n\n    if (event.key === 'Enter') {\n      onAddTask(title);\n      this.setState({\n        title: '',\n      });\n    }\n  }\n\n  render() {\n    const { title, isValid } = this.state;\n\n    return (\n      <header className=\"header\">\n        <h1>todos</h1>\n        <input\n          name=\"task\"\n          className={className('new-todo ', { 'new-todo--invalid': !isValid })}\n          placeholder={isValid && ('What needs to be done?')}\n          value={title}\n          required\n          onKeyPress={this.onSubmit}\n          onChange={this.handleValue}\n        />\n        {!isValid && (\n          <span className=\"error-message\">Please, type your task</span>\n        )}\n      </header>\n    );\n  }\n}\n\nInput.propTypes = InputTypes;\n","import React from 'react';\nimport { TodoItemTypes } from '../Shapes/Shapes';\n\nexport class TodoItem extends React.Component {\n  state = {\n    editedTitle: this.props.title,\n  }\n\n  handleValue = (event) => {\n    const titleValue = event.target.value.replace(/\\s/, ' ').replace(/^\\s/, '');\n\n    this.setState(prevState => ({\n      editedTitle: titleValue,\n    }));\n  }\n\n  onSubmit = (event) => {\n    const onAddTask = this.props.onChangeCurrentTask;\n    const taskId = event.target.name;\n    const { editedTitle } = this.state;\n    const currentKeyCode = event.keyCode;\n\n    onAddTask(editedTitle, taskId, currentKeyCode);\n  }\n\n  render() {\n    const {\n      id,\n      isCompleted,\n      title,\n      toggle,\n      onDeleted,\n      onEdit,\n    } = this.props;\n\n    const { editedTitle } = this.state;\n\n    return (\n      <>\n        <div className=\"view\">\n          <input\n            id={id}\n            type=\"checkbox\"\n            className=\"toggle\"\n            value={id}\n            onChange={toggle}\n            checked={isCompleted}\n          />\n          <label\n            htmlFor={id}\n            value={id}\n            onDoubleClick={onEdit}\n          >\n            {title}\n          </label>\n          <button\n            type=\"button\"\n            className=\"destroy\"\n            value={id}\n            onClick={onDeleted}\n          />\n        </div>\n        <input\n          name={id}\n          type=\"text\"\n          className=\"edit\"\n          required\n          ref={input => input && input.focus()}\n          value={editedTitle}\n          onChange={this.handleValue}\n          onKeyDown={this.onSubmit}\n          onBlur={this.onSubmit}\n        />\n      </>\n    );\n  }\n}\n\nTodoItem.propTypes = TodoItemTypes;\n","import React from 'react';\nimport className from 'classnames';\nimport { TodoListTypes } from '../Shapes/Shapes';\nimport { TodoItem } from '../TodoItem/TodoItem';\n\nexport const TodoList = (props) => {\n  const {\n    tasks,\n    showOnlyActive,\n    showOnlyCompleted,\n    toggle,\n    onDeleted,\n    onAllSelected,\n    onEdit,\n    onChangeCurrentTask,\n  } = props;\n\n  let tasksToShow = tasks;\n\n  if (showOnlyActive) {\n    tasksToShow = tasks.filter(task => task.completed === false);\n  } else if (showOnlyCompleted) {\n    tasksToShow = tasks.filter(task => task.completed === true);\n  }\n\n  return (\n    <section className=\"main\">\n      <input\n        type=\"checkbox\"\n        id=\"toggle-all\"\n        className=\"toggle-all\"\n        onChange={onAllSelected}\n      />\n      <label htmlFor=\"toggle-all\">Mark all as complete</label>\n      <ul className=\"todo-list\">\n        {tasksToShow.map(task => (\n          <li\n            key={task.id}\n            className={className({\n              completed: task.completed,\n              editing: task.isEdited,\n            })}\n          >\n            <TodoItem\n              id={task.id}\n              isCompleted={task.completed}\n              title={task.title}\n              toggle={toggle}\n              onDeleted={onDeleted}\n              onEdit={onEdit}\n              onChangeCurrentTask={onChangeCurrentTask}\n            />\n          </li>\n        ))}\n      </ul>\n    </section>\n  );\n};\n\nTodoList.propTypes = TodoListTypes;\n\nTodoList.defaultProps = {\n  tasks: [],\n};\n","import React from 'react';\nimport className from 'classnames';\nimport { TodosFilterTypes } from '../Shapes/Shapes';\n\nexport const TodosFilter = (props) => {\n  const {\n    tasks,\n    onToggleTask,\n    onClear,\n    showOnlyActive,\n    showOnlyCompleted,\n  } = props;\n\n  const activeTasks = tasks.filter(task => task.completed === false).length;\n\n  return (\n    <footer className=\"footer\">\n      <span className=\"todo-count\">\n        {`${activeTasks}\n          items left`}\n      </span>\n      <ul className=\"filters\">\n        <li>\n          <a\n            className={className({ selected: !showOnlyActive\n              && !showOnlyCompleted })}\n            name=\"all\"\n            href=\"#/\"\n            onClick={onToggleTask}\n          >\n            All\n          </a>\n        </li>\n\n        <li>\n          <a\n            className={className({ selected: showOnlyActive })}\n            name=\"active\"\n            href=\"#/active\"\n            onClick={onToggleTask}\n          >\n            Active\n          </a>\n        </li>\n\n        <li>\n          <a\n            className={className({ selected: showOnlyCompleted })}\n            name=\"completed\"\n            href=\"#/completed\"\n            onClick={onToggleTask}\n          >\n            Completed\n          </a>\n        </li>\n      </ul>\n      <button\n        type=\"button\"\n        className=\"clear-completed\"\n        onClick={onClear}\n      >\n        Clear completed\n      </button>\n    </footer>\n  );\n};\n\nTodosFilter.propTypes = TodosFilterTypes;\n","import React from 'react';\n\nimport { TodoAppTypes } from '../Shapes/Shapes';\nimport { Input } from '../Input/Input';\nimport { TodoList } from '../TodoList/TodoList';\nimport { TodosFilter } from '../TodosFilter/TodosFilter';\n\nexport const TodoApp = (props) => {\n  const {\n    tasks,\n    showOnlyActive,\n    showOnlyCompleted,\n    addTask,\n    toggle,\n    onToggleTask,\n    onDeleted,\n    onClear,\n    onAllSelected,\n    onEdit,\n    onChangeCurrentTask,\n  } = props;\n\n  const numberOfTask = tasks.length;\n\n  return (\n    <section className=\"todoapp\">\n\n      <Input addTask={addTask} />\n\n      <TodoList\n        tasks={tasks}\n        showOnlyActive={showOnlyActive}\n        showOnlyCompleted={showOnlyCompleted}\n        toggle={toggle}\n        onDeleted={onDeleted}\n        onAllSelected={onAllSelected}\n        onEdit={onEdit}\n        onChangeCurrentTask={onChangeCurrentTask}\n      />\n\n      {(numberOfTask)\n        ? (\n          <TodosFilter\n            tasks={tasks}\n            onToggleTask={onToggleTask}\n            showOnlyActive={showOnlyActive}\n            showOnlyCompleted={showOnlyCompleted}\n            onClear={onClear}\n          />\n        )\n        : ''}\n\n    </section>\n  );\n};\n\nTodoApp.propTypes = TodoAppTypes;\n\nTodoApp.defaultProps = {\n  tasks: [],\n};\n","import React from 'react';\nimport { uuid } from 'uuidv4';\nimport tasksFromServer from './api/tasks.json';\nimport { TodoApp } from './components/TodoApp/TodoApp';\n\nexport class App extends React.Component {\n  state={\n    tasks: tasksFromServer,\n    showOnlyCompleted: false,\n    showOnlyActive: false,\n  }\n\n  addNewTask = (title) => {\n    const newTask = {\n      title,\n      id: uuid(),\n      completed: false,\n      isEdited: false,\n    };\n\n    this.setState(prevState => ({\n      tasks: [...prevState.tasks, newTask],\n    }));\n  }\n\n  changeCurrentTask = (title, id, keyCode) => {\n    if (keyCode === 13) {\n      this.setState(prevState => ({\n        tasks: prevState.tasks.map((task) => {\n          if (task.id === id) {\n            return {\n              ...task,\n              title,\n              isEdited: false,\n            };\n          }\n\n          return task;\n        }),\n      }));\n    }\n\n    if (keyCode === 27 || !keyCode) {\n      this.setState(prevState => ({\n        tasks: prevState.tasks.map((task) => {\n          if (task.id === id) {\n            return {\n              ...task,\n              isEdited: false,\n            };\n          }\n\n          return task;\n        }),\n      }));\n    }\n  }\n\n  toggleCheck = (event) => {\n    const id = event.target.value;\n\n    this.setState(prevState => ({\n      tasks: prevState.tasks.map((task) => {\n        if (task.id === id) {\n          return {\n            ...task,\n            completed: !task.completed,\n          };\n        }\n\n        return task;\n      }),\n    }));\n  }\n\n  editTask = (event) => {\n    const currentId = event.currentTarget.getAttribute('value');\n\n    this.setState(prevState => ({\n      tasks: prevState.tasks.map((task) => {\n        if (task.id === currentId) {\n          return {\n            ...task,\n            isEdited: !task.isEdited,\n          };\n        }\n\n        return task;\n      }),\n    }));\n  }\n\n  toggleTask = (event) => {\n    const onToggleTask = event.target.name;\n\n    switch (onToggleTask) {\n      case 'active':\n        this.setState({\n          showOnlyCompleted: false,\n          showOnlyActive: true,\n        });\n        break;\n      case 'completed':\n        this.setState({\n          showOnlyCompleted: true,\n          showOnlyActive: false,\n        });\n        break;\n      default: this.setState({\n        showOnlyCompleted: false,\n        showOnlyActive: false,\n      });\n    }\n  }\n\n  deleteTask = (event) => {\n    const currentID = event.target.value;\n\n    this.setState(prevState => ({\n      tasks: prevState.tasks.filter(task => task.id !== currentID),\n    }));\n  }\n\n  clearCompletedTasks = () => {\n    this.setState(prevState => ({\n      tasks: prevState.tasks.filter(task => task.completed === false),\n    }));\n  }\n\n  selectAllAsCompleted = (event) => {\n    const isChecked = event.target.checked;\n\n    this.setState(prevState => ({\n      tasks: prevState.tasks.map(task => ({\n        ...task,\n        completed: isChecked,\n      })),\n    }));\n  }\n\n  render() {\n    const { tasks, showOnlyActive, showOnlyCompleted } = this.state;\n\n    return (\n      <TodoApp\n        tasks={tasks}\n        showOnlyActive={showOnlyActive}\n        showOnlyCompleted={showOnlyCompleted}\n        addTask={this.addNewTask}\n        toggle={this.toggleCheck}\n        onToggleTask={this.toggleTask}\n        onDeleted={this.deleteTask}\n        onClear={this.clearCompletedTasks}\n        onAllSelected={this.selectAllAsCompleted}\n        onEdit={this.editTask}\n        onChangeCurrentTask={this.changeCurrentTask}\n      />\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './base.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}